void visit(graph&h,int v,int s,int r,vector<int>&no,vector<vector<int>>&comp,vector<int>&prev,vector<vector<int>>&next,vector<weight>&mcost,vector<int>&mark,weight&cost,bool&found){if(mark[v]){vector<int>temp=no;found=true;do{cost+=mcost[v];v=prev[v];if(v!=s){while(comp[v].size()>0){no[comp[v].back()]=s;comp[s].push_back(comp[v].back());comp[v].pop_back();}}}while(v!=s);forall(j,comp[s])if(*j!=r)forall(e,h[*j])if(no[e->src]!=s)e->w-=mcost[ temp[*j] ];}mark[v]=true;forall(i,next[v])if(no[*i]!=no[v]&&prev[no[*i]]==v)if(!mark[no[*i]]||*i==s)visit(h,*i,s,r,no,comp,prev,next,mcost,mark,cost,found);}weight minimumSpanningArborescence(const graph&g,int r){const int n=sz(g);graph h(n);forn(u,n)forall(e,g[u])h[e->dst].pb(*e);vector<int>no(n);vector<vector<int>>comp(n);forn(u,n)comp[u].pb(no[u]=u);for(weight cost=0;;){vector<int>prev(n,-1);vector<weight>mcost(n,INF);forn(j,n)if(j!=r)forall(e,h[j])if(no[e->src]!=no[j])if(e->w<mcost[ no[j] ])mcost[ no[j] ]=e->w,prev[ no[j] ]=no[e->src];vector<vector<int>>next(n);forn(u,n)if(prev[u]>=0)next[ prev[u] ].push_back(u);bool stop=true;vector<int>mark(n);forn(u,n)if(u!=r&&!mark[u]&&!comp[u].empty()){bool found=false;visit(h,u,u,r,no,comp,prev,next,mcost,mark,cost,found);if(found)stop=false;}if(stop){forn(u,n)if(prev[u]>=0)cost+=mcost[u];return cost;}}}
